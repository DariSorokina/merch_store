// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/postgresql.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	models "merch_store/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockStorage) BuyItem(ctx context.Context, userID int32, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, userID, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockStorageMockRecorder) BuyItem(ctx, userID, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockStorage)(nil).BuyItem), ctx, userID, itemName)
}

// CheckUser mocks base method.
func (m *MockStorage) CheckUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockStorageMockRecorder) CheckUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockStorage)(nil).CheckUser), ctx, user)
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, user)
}

// GetCoinsTransactionInfo mocks base method.
func (m *MockStorage) GetCoinsTransactionInfo(ctx context.Context, tx *sql.Tx, userID int32, username, query string) ([]models.TransactionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsTransactionInfo", ctx, tx, userID, username, query)
	ret0, _ := ret[0].([]models.TransactionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsTransactionInfo indicates an expected call of GetCoinsTransactionInfo.
func (mr *MockStorageMockRecorder) GetCoinsTransactionInfo(ctx, tx, userID, username, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsTransactionInfo", reflect.TypeOf((*MockStorage)(nil).GetCoinsTransactionInfo), ctx, tx, userID, username, query)
}

// GetInfo mocks base method.
func (m *MockStorage) GetInfo(ctx context.Context, userID int32) (*models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, userID)
	ret0, _ := ret[0].(*models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockStorageMockRecorder) GetInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockStorage)(nil).GetInfo), ctx, userID)
}

// GetItemPrice mocks base method.
func (m *MockStorage) GetItemPrice(ctx context.Context, tx *sql.Tx, itemName string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemPrice", ctx, tx, itemName)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemPrice indicates an expected call of GetItemPrice.
func (mr *MockStorageMockRecorder) GetItemPrice(ctx, tx, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemPrice", reflect.TypeOf((*MockStorage)(nil).GetItemPrice), ctx, tx, itemName)
}

// GetMerchPurchasesInfo mocks base method.
func (m *MockStorage) GetMerchPurchasesInfo(ctx context.Context, tx *sql.Tx, userID int32) ([]models.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchPurchasesInfo", ctx, tx, userID)
	ret0, _ := ret[0].([]models.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchPurchasesInfo indicates an expected call of GetMerchPurchasesInfo.
func (mr *MockStorageMockRecorder) GetMerchPurchasesInfo(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchPurchasesInfo", reflect.TypeOf((*MockStorage)(nil).GetMerchPurchasesInfo), ctx, tx, userID)
}

// GetUserID mocks base method.
func (m *MockStorage) GetUserID(ctx context.Context, tx *sql.Tx, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, tx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStorageMockRecorder) GetUserID(ctx, tx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStorage)(nil).GetUserID), ctx, tx, username)
}

// GetUserInfo mocks base method.
func (m *MockStorage) GetUserInfo(ctx context.Context, tx *sql.Tx, userID int32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, tx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockStorageMockRecorder) GetUserInfo(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockStorage)(nil).GetUserInfo), ctx, tx, userID)
}

// TransferCoins mocks base method.
func (m *MockStorage) TransferCoins(ctx context.Context, userID int32, req models.SendCoinRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCoins", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferCoins indicates an expected call of TransferCoins.
func (mr *MockStorageMockRecorder) TransferCoins(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCoins", reflect.TypeOf((*MockStorage)(nil).TransferCoins), ctx, userID, req)
}

// UpdateUserCoins mocks base method.
func (m *MockStorage) UpdateUserCoins(ctx context.Context, tx *sql.Tx, userID int32, coins int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoins", ctx, tx, userID, coins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoins indicates an expected call of UpdateUserCoins.
func (mr *MockStorageMockRecorder) UpdateUserCoins(ctx, tx, userID, coins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoins", reflect.TypeOf((*MockStorage)(nil).UpdateUserCoins), ctx, tx, userID, coins)
}
